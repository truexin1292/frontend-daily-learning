<template>
<div class="form">
    <input type="text" class="form-title" placeholder="标题" value="{= todo.title =}">
    <textarea class="form-desc" placeholder="备注" value="{= todo.desc =}"></textarea>

    <ui-categorypicker datasource="{{categories}}" value="{= todo.categoryId =}"></ui-categorypicker>
    <i class="fa fa-plus add-category" on-click="startAddCategory"></i>
    <i class="fa fa-pencil edit-category" on-click="startEditCategory"></i>
    <div>预期完成时间： <ui-calendar value="{= endTimeDate =}"></ui-calendar><ui-timepicker value="{= endTimeHour =}"></ui-timepicker></div>

    <div class="form-op">
        <button type="button" class="form-ok" on-click="submit"><i class="fa fa-check-circle-o"></i></button>
        <button type="button" class="form-cancel" on-click="cancel"><i class="fa fa-times-circle-o"></i></button>
    </div>
</div>
</template>

<script>

import AddCategory from '../category/Add.san'
import EditCategory from '../category/Edit.san'
import CategoryPicker from '../ui/CategoryPicker.san'
import TimePicker from '../ui/TimePicker.san'
import Calendar from '../ui/Calendar.san'

import { connect } from 'san-store'

import san from 'san'


let AddCategoryDialog = san.defineComponent({
    template: '<div class="ui-layer add-category-layer" style="width: {{width}}px; top: {{top}}px; left: {{left}}px;">'
        + '<ui-addcategory on-finished="hide()" inDialog="1"></ui-addcategory>'
        + '</div>',

    components: {
        'ui-addcategory': AddCategory
    },

    initData: function () {
        return {
            width: 200,
            top: 100,
            left: -1000
        };
    },

    show: function () {
        this.data.set('left', document.body.clientWidth / 2 - 100);
    },

    hide: function () {
        this.data.set('left', -1000);
    }
});

let EditCategoryDialog = san.defineComponent({
    template: '<div class="ui-layer edit-category-layer" style="width: {{width}}px; top: {{top}}px; left: {{left}}px;">'
        +   '<i class="fa fa-times-circle-o" on-click="hide"></i>'
        +   '<ui-editcategory></ui-editcategory>'
        + '</div>',

    components: {
        'ui-editcategory': EditCategory
    },

    initData: function () {
        return {
            width: 200,
            top: 100,
            left: -1000
        };
    },

    show: function () {
        this.data.set('left', document.body.clientWidth / 2 - 100);
    },

    hide: function () {
        this.data.set('left', -1000);
    }
});

export default connect.san(
    {todo: 'editingTodo', categories: 'categories', finished: 'editingTodoFinished'},
    {
        start: 'startEditTodo',
        submit: 'submitEditTodo',
        finishState: 'finishEditTodoState',
        categories: 'fetchCategories'
    }
)({

    components: {
        'ui-categorypicker': CategoryPicker,
        'ui-timepicker': TimePicker,
        'ui-calendar': Calendar
    },

    attached: function () {
        var id = +(this.data.get('route.query.id') || 0);

        this.actions.start(id);
        this.actions.categories();

        this.watch('finished', value => {
            if (value === true) {
                history.go(-1);
            }
        });
    },

    computed: {
        endTimeHour() {
            var endTime = new Date(this.data.get('todo.endTime'));
            return endTime.getHours();
        },

        endTimeDate() {
            var endTime = new Date(this.data.get('todo.endTime'));
            return new Date(
                endTime.getFullYear(),
                endTime.getMonth(),
                endTime.getDate()
            );
        }
    },

    joinEndTime: function () {
        var endTime = new Date(this.data.get('endTimeDate').getTime());
        endTime.setHours(this.data.get('endTimeHour'));
        this.data.set('todo.endTime', endTime.getTime());
    },

    submit: function () {
        this.joinEndTime();
        this.actions.submit(this.data.get('todo'));
    },

    cancel: function () {
        this.actions.finishState(true);
    },

    startAddCategory: function () {
        if (!this.addCategoryDialog) {
            this.addCategoryDialog = new AddCategoryDialog();
            this.addCategoryDialog.attach(document.body);
        }
        this.addCategoryDialog.show();
    },

    startEditCategory: function () {
        if (!this.editCategoryDialog) {
            this.editCategoryDialog = new EditCategoryDialog();
            this.editCategoryDialog.attach(document.body);
        }
        this.editCategoryDialog.show();
    },

    disposed: function () {
        if (this.addCategoryDialog) {
            this.addCategoryDialog.dispose();
            this.addCategoryDialog = null;
        }

        if (this.editCategoryDialog) {
            this.editCategoryDialog.dispose();
            this.editCategoryDialog = null;
        }
    }
})

</script>

<style>

.form {
    position: relative;
    box-sizing: border-box;
    border-radius: 5px;
    margin: 10px auto;
    width: 90%;
    max-width: 800px;
    background: #555;
    padding: 10px;
    color: #999;
}

.form-op {
    text-align: center;
}

.form-title,
.form-desc {
    display: block;
    width: 100%;
    border: 0;
    outline: 0;
    background: none;
    color: #fff;
}

.form-title:hover,
.form-desc:hover,
.form-title:focus,
.form-desc:focus {
    background: #444;
}

.form-title {
    font-size: 18px;
    height: 30px;
    line-height: 1.5;
    margin-bottom: 5px;
}

.form-desc {
    resize: none;
    height: 40px;
}

.form-ok,
.form-cancel {
    box-sizing: border-box;
    border: 0;
    background: none;
    font-size: 24px;
    cursor: pointer;
    margin: 0 10px;
}

.form-ok {
    color: #60a917;
}

.form-cancel {
    color: #e51400;
}


.add-category-layer .form-title,
.add-category-layer .form-title:hover,
.add-category-layer .form-title:focus {
    background: #eee;
    border: 1px solid #ddd;
    color: #333;
}

.edit-category-layer .fa-times-circle-o {
    color: red;
    cursor: pointer;
    font-size: 16px;
    margin: 5px;
}

</style>
